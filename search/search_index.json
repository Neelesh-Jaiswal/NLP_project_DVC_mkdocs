{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"My first page","title":"Home"},{"location":"#my-first-page","text":"","title":"My first page"},{"location":"CML_from_DVC_studio/","text":"Step 1: Sign in with your Github Account Step 2: Click on 'Add View' button Step 3: Integrate your Github with DVC Studio and select your DVC repository for which you want to create a view Step 4: Once the repo gets added in your DVC Studio account, click 'Connect' Step 5: Configure settings: - Project directory for the view - Data remotes/cloud storage - Custom metrics and parameters Step 6 : A new View gets added to your DVC Studio account dashboard. The dashboard contains many functionalities. You can explore. You can also run the experiments directly from DVC Studio. Step 1: Copy paste ci-cd.yml file from [link][(https://cml.dev/) website for DVC under GitHub Step 2: Add Github token To add toekn, in your github account , go to setting->Developer setting->Personal access token. Generate new token Give basic read/write access Step 3: To add github toekn to your current repo - Got your current repository ->Settings->Secrets->Actions - Click on new repository secret - Give the name to the new secret which you mentioned in ci-cd.yml and paste the token value Step 7: Push all your changes of ci-cd.yml Step 8: Go to Github Actions of your repo. Setp 9: You can see the reports.md file as a commnet in your github commit Setp 10: Congrats! your Github workflowws is integrated with your DVC studio. Now you can directly do diffent experiments(Runs) from DVC Studio itself.","title":"CML Guide"},{"location":"CML_from_DVC_studio/#you-can-also-run-the-experiments-directly-from-dvc-studio","text":"Step 1: Copy paste ci-cd.yml file from [link][(https://cml.dev/) website for DVC under GitHub Step 2: Add Github token To add toekn, in your github account , go to setting->Developer setting->Personal access token. Generate new token Give basic read/write access Step 3: To add github toekn to your current repo - Got your current repository ->Settings->Secrets->Actions - Click on new repository secret - Give the name to the new secret which you mentioned in ci-cd.yml and paste the token value Step 7: Push all your changes of ci-cd.yml Step 8: Go to Github Actions of your repo. Setp 9: You can see the reports.md file as a commnet in your github commit Setp 10: Congrats! your Github workflowws is integrated with your DVC studio. Now you can directly do diffent experiments(Runs) from DVC Studio itself.","title":"You can also run the experiments directly from DVC Studio."},{"location":"data_prep/","text":"Data preparation Stage Convert my data into train and test.tsv in 70:30 ratio data.xml |-train.tsv |-test.tsv - We are choosing only 3 tags in the xml data: 1. row id 2. title 3. Tags(Stackover flow tags specific to python) Tags Feature names row Id row ID title and body text stackoverflow tags Label1 - Python","title":"Data Preparation stage"},{"location":"data_prep/#data-preparation-stage","text":"Convert my data into train and test.tsv in 70:30 ratio data.xml |-train.tsv |-test.tsv - We are choosing only 3 tags in the xml data: 1. row id 2. title 3. Tags(Stackover flow tags specific to python) Tags Feature names row Id row ID title and body text stackoverflow tags Label1 - Python","title":"Data preparation Stage"},{"location":"featurization/","text":"Featurization Stage Explanation for CountVectorizer from sklearn.feature_extraction.text import CountVectorizer max_features = 4 ngrams = 2 # tri gram vectorizer = CountVectorizer ( max_features = max_features , ngram_range = ( 1 , ngrams )) X = vectorizer . fit_transform ( corpus ) print ( X . toarray ()) print ( vectorizer . get_feature_names_out ()) Explanation of np.csr_matrix import numpy as np from scipy.sparse import csr_matrix A = np . array ([ [ 1 , 0 , 0 , 0 , 0 , 1 , 0 ], [ 0 , 1 , 0 , 3 , 0 , 0 , 0 ], [ 0 , 0 , 0 , 0 , 1 , 0 , 2 ] ]) print ( A ) S = csr_matrix ( A ) print ( S ) print ( type ( S )) B = S . todense () print ( B ) PRC Explanation precision , recall , prc_threshold = [ 0.1 , 0.2 , 0.4 , 0.9 , 0.99 , 0.22 , 0.66 ], [ 0.1 , 0.2 , 0.4 , 0.9 , 0.99 , 0.22 , 0.66 ], [ 0.1 , 0.2 , 0.4 , 0.9 , 0.99 , 0.22 , 0.66 ] n_th = 4 print ( list ( zip ( precision , recall , prc_threshold ))[:: n_th ])","title":"Featurization stage"},{"location":"featurization/#featurization-stage","text":"Explanation for CountVectorizer from sklearn.feature_extraction.text import CountVectorizer max_features = 4 ngrams = 2 # tri gram vectorizer = CountVectorizer ( max_features = max_features , ngram_range = ( 1 , ngrams )) X = vectorizer . fit_transform ( corpus ) print ( X . toarray ()) print ( vectorizer . get_feature_names_out ()) Explanation of np.csr_matrix import numpy as np from scipy.sparse import csr_matrix A = np . array ([ [ 1 , 0 , 0 , 0 , 0 , 1 , 0 ], [ 0 , 1 , 0 , 3 , 0 , 0 , 0 ], [ 0 , 0 , 0 , 0 , 1 , 0 , 2 ] ]) print ( A ) S = csr_matrix ( A ) print ( S ) print ( type ( S )) B = S . todense () print ( B ) PRC Explanation precision , recall , prc_threshold = [ 0.1 , 0.2 , 0.4 , 0.9 , 0.99 , 0.22 , 0.66 ], [ 0.1 , 0.2 , 0.4 , 0.9 , 0.99 , 0.22 , 0.66 ], [ 0.1 , 0.2 , 0.4 , 0.9 , 0.99 , 0.22 , 0.66 ] n_th = 4 print ( list ( zip ( precision , recall , prc_threshold ))[:: n_th ])","title":"Featurization Stage"}]}